from random import *
from pybrain.tools.shortcuts import buildNetwork
from pybrain.datasets import SupervisedDataSet
from pybrain.supervised.trainers import BackpropTrainer
#from pandas import *

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

import matplotlib.gridspec as gridspec

#ds = SupervisedDataSet(4, 2)

#ds.addSample((0.9, 0.8, 0.7, 0.9),(0.5 , 0.4))
#ds.addSample((0.29, 0.1, 0.2, 0.9),(0.32 , 0.1))
#ds.addSample((0.4, 0.2, 0.98, 0.2),(0.45 , 0.7))
Gindice1 = 0.5 
Gindice2 = 0.5

#def restringirEfetivo():
 #   print "Restringir"

#def atingirIndices():
 #   print "******* Atingir Indices ********"
  #  print "Indice 1 - "
   # indice1 = float(raw_input(">> "))
    #print "Indice 2 - "
#    indice2 = float(raw_input(">> "))
 #   return indice1, indice2

#def objetivo():
 #   print "******* Objetivo ********"
  #  print "O que deseja?"
   # print "1 - Restringir o efetivo"
  #  print "2 - Atingir indices determinados"
   # escolha = int(raw_input(">> "))
#    if (escolha == 1):
#        restringirEfetivo()
#    elif(escolha == 2):
#        atingirIndices()
 #   else:
  #      "Escolha uma opcao valida!"
   #     objetivo()
 #   print "****************** \n"

#objetivo()




ds = SupervisedDataSet(12,2)

ds.addSample((0.0,0.0,0.0,0.40340218712029163,0.09230769230769231,0.3448275862068966,0.2719298245614035,0.002327680266956455,0.036585365853658534,0.05405405405405406,0.22727272727272727,0.3775933609958506), (0.0196078431372549,0.38453914767096137))

ds.addSample((0.0,0.0,0.09090909090909091,0.402187120291616,0.09230769230769231,0.2471264367816092,0.19298245614035087,0.03078786182369019,0.0,0.10810810810810811,0.1590909090909091,0.3775933609958506), (0.0784313725490196,0.37066402378592667))

ds.addSample((0.0,0.0,0.18181818181818182,0.39003645200486026,0.06153846153846154,0.1206896551724138,0.23684210526315788,0.003735579192325002,0.0,0.02702702702702703,0.13636363636363635,0.36099585062240663), (0.1568627450980392,0.5322101090188305))

ds.addSample((0.0,0.0,0.2727272727272727,0.38153098420413123,0.046153846153846156,0.11494252873563218,0.19298245614035087,891078034269.656,0.0,0.02702702702702703,0.13636363636363635,0.2033195020746888), (0.0392156862745098,0.40832507433102083))

ds.addSample((0.0,0.0,0.36363636363636365,0.36816524908869985,0.06153846153846154,0.15517241379310345,0.16666666666666666,0.0011202731034785569,0.0,0.08108108108108109,0.25,0.35684647302904565), (0.09803921568627451,0.645193260654113))

ds.addSample((0.0,0.0,0.45454545454545453,0.36330498177399756,0.015384615384615385,0.08620689655172414,0.20175438596491227,143939144466.032,0.10975609756097561,0.13513513513513514,0.18181818181818182,0.3360995850622407), (0.058823529411764705,0.4628344895936571))

ds.addSample((0.0,0.0,0.5454545454545454,0.36330498177399756,0.06153846153846154,0.09770114942528736,0.18421052631578946,0.01369036563813789,0.0,0.10810810810810811,0.09090909090909091,0.23651452282157676), (0.0784313725490196,0.4400396432111001))

ds.addSample((0.0,0.0,0.6363636363636364,0.362089914945322,0.03076923076923077,0.09770114942528736,0.18421052631578946,0.001509017464133215,0.0,0.04054054054054054,0.18181818181818182,0.36099585062240663), (0.0784313725490196,0.4638255698711596))

ds.addSample((0.0,0.0,0.7272727272727273,0.362089914945322,0.09230769230769231,0.3448275862068966,0.20175438596491227,0.0013469336231215902,0.0,0.06756756756756757,0.22727272727272727,0.36929460580912865), (0.09803921568627451,0.4628344895936571))

ds.addSample((0.0,0.0,0.8181818181818182,0.353584447144593,0.1076923076923077,0.5804597701149425,0.34210526315789475,689652144323.333,0.07317073170731707,0.08108108108108109,0.20454545454545456,0.3775933609958506), (0.0392156862745098,0.5569871159563925))

ds.addSample((0.0,0.0,0.9090909090909091,0.3487241798298906,0.12307692307692308,0.45977011494252873,0.2894736842105263,0.004273827949199241,0.024390243902439025,0.0945945945945946,0.11363636363636363,0.4107883817427386), (0.11764705882352941,0.5777998017839445))

ds.addSample((0.0,0.0,1.0,0.3462940461725395,0.1076923076923077,0.45977011494252873,0.23684210526315788,3791615898837.55,0.0,0.0945945945945946,0.06818181818181818,0.23651452282157676), (0.058823529411764705,0.41526263627353815))

ds.addSample((0.04,0.0,0.0,0.5407047387606319,0.2,0.3103448275862069,0.30701754385964913,0.0038685963930143465,0.0,0.02702702702702703,0.13636363636363635,0.3070539419087137), (0.17647058823529413,0.38354806739345887))

ds.addSample((0.04,0.0,0.09090909090909091,0.5407047387606319,0.18461538461538463,0.2988505747126437,0.2982456140350877,861483408524.604,0.07317073170731707,0.0945945945945946,0.18181818181818182,0.3070539419087137), (0.0784313725490196,0.45391476709613476))

ds.addSample((0.04,0.0,0.18181818181818182,0.5382746051032807,0.38461538461538464,0.29310344827586204,0.17543859649122806,0.0047950296923195135,0.0,0.0945945945945946,0.11363636363636363,0.2821576763485477), (0.0784313725490196,0.423191278493558))

ds.addSample((0.04,0.0,0.2727272727272727,0.5334143377885784,0.2,0.3735632183908046,0.19298245614035087,632792175717.061,0.0,0.10810810810810811,0.36363636363636365,0.1078838174273859), (0.13725490196078433,0.43508424182358774))

ds.addSample((0.04,0.0,0.36363636363636365,0.5249088699878494,0.13846153846153847,0.4540229885057471,0.23684210526315788,0.011334010241380445,0.024390243902439025,0.05405405405405406,0.18181818181818182,0.17012448132780084), (0.1568627450980392,0.6015857284440039))

ds.addSample((0.04,0.0,0.45454545454545453,0.5224787363304981,0.16923076923076924,0.3620689655172414,0.2543859649122807,0.00401682747719564,0.0,0.12162162162162163,0.06818181818181818,0.17012448132780084), (0.09803921568627451,0.44796828543111994))

ds.addSample((0.04,0.0,0.5454545454545454,0.5224787363304981,0.15384615384615385,0.41379310344827586,0.30701754385964913,0.004555251863316539,0.0,0.05405405405405406,0.36363636363636365,0.11618257261410789), (0.0,0.4380574826560951))

ds.addSample((0.04,0.0,0.6363636363636364,0.5164034021871203,0.09230769230769231,0.27586206896551724,0.21052631578947367,0.0059894512683724655,0.0,0.04054054054054054,0.18181818181818182,0.2946058091286307), (0.0784313725490196,0.4529236868186323))

ds.addSample((0.04,0.0,0.7272727272727273,0.5164034021871203,0.23076923076923078,0.40804597701149425,0.24561403508771928,0.018249843580202194,0.0,0.0945945945945946,0.18181818181818182,0.2821576763485477), (0.21568627450980393,0.43310208126858274))

ds.addSample((0.04,0.0,0.8181818181818182,0.5006075334143378,0.2153846153846154,0.5517241379310345,0.47368421052631576,0.006689399677281258,0.012195121951219513,0.0945945945945946,0.29545454545454547,0.3360995850622407), (0.21568627450980393,0.5193260654112983))

ds.addSample((0.04,0.0,0.9090909090909091,0.5006075334143378,0.09230769230769231,0.27586206896551724,0.22807017543859648,0.007961471334013896,0.04878048780487805,0.08108108108108109,0.18181818181818182,0.26141078838174275), (0.11764705882352941,0.4519326065411298))

ds.addSample((0.04,0.0,1.0,0.49210206561360875,0.1076923076923077,0.4425287356321839,0.2631578947368421,577447009363.234,0.0,0.0945945945945946,0.06818181818181818,0.24896265560165975), (0.11764705882352941,0.4261645193260654))

ds.addSample((0.08,0.0,0.0,0.5455650060753341,0.4153846153846154,0.28735632183908044,0.2894736842105263,0.027042952327636358,0.08536585365853659,0.06756756756756757,0.22727272727272727,0.3983402489626556), (0.1568627450980392,0.40634291377601583))

ds.addSample((0.08,0.0,0.09090909090909091,0.5394896719319563,0.12307692307692308,0.3160919540229885,0.2894736842105263,0.021017870275847686,0.10975609756097561,0.04054054054054054,0.2727272727272727,0.5062240663900415), (0.2549019607843137,0.4132804757185332))

ds.addSample((0.08,0.0,0.18181818181818182,0.5334143377885784,0.2,0.2988505747126437,0.2894736842105263,0.01752571321939386,0.0,0.06756756756756757,0.2727272727272727,0.5062240663900415), (0.19607843137254902,0.5004955401387512))

ds.addSample((0.08,0.0,0.2727272727272727,0.5273390036452005,0.26153846153846155,0.39080459770114945,0.2543859649122807,0.002762853316648555,0.024390243902439025,0.0945945945945946,0.22727272727272727,0.3651452282157676), (0.1568627450980392,0.48265609514370666))

ds.addSample((0.08,0.0,0.36363636363636365,0.520048602673147,0.13846153846153847,0.367816091954023,0.20175438596491227,0.0016394551102622364,0.1951219512195122,0.02702702702702703,0.13636363636363635,0.36099585062240663), (0.17647058823529413,0.6035678889990089))

ds.addSample((0.08,0.0,0.45454545454545453,0.5176184690157959,0.18461538461538463,0.3850574712643678,0.22807017543859648,1559807246901.79,0.3048780487804878,0.13513513513513514,0.20454545454545456,0.42738589211618255), (0.23529411764705882,0.48662041625371655))

ds.addSample((0.08,0.0,0.5454545454545454,0.5176184690157959,0.15384615384615385,0.41379310344827586,0.40350877192982454,0.0073572079340512185,0.36585365853658536,0.04054054054054054,0.3181818181818182,0.35684647302904565), (0.17647058823529413,0.48662041625371655))

ds.addSample((0.08,0.0,0.6363636363636364,0.5127582017010935,0.09230769230769231,0.26436781609195403,0.21052631578947367,0.0016251852339710872,0.024390243902439025,0.14864864864864866,0.29545454545454547,0.3112033195020747), (0.17647058823529413,0.4390485629335976))

ds.addSample((0.08,0.0,0.7272727272727273,0.5127582017010935,0.2,0.3390804597701149,0.2543859649122807,584066036596.744,0.0,0.12162162162162163,0.22727272727272727,0.42738589211618255), (0.0784313725490196,0.5252725470763132))

ds.addSample((0.08,0.0,0.8181818181818182,0.5078979343863913,0.16923076923076924,0.41954022988505746,0.39473684210526316,0.012212006454374815,0.024390243902439025,0.04054054054054054,0.20454545454545456,0.4979253112033195), (0.0392156862745098,0.43310208126858274))

ds.addSample((0.08,0.0,0.9090909090909091,0.4933171324422843,0.24615384615384617,0.41379310344827586,0.3333333333333333,0.005766764360435121,0.024390243902439025,0.05405405405405406,0.1590909090909091,0.2821576763485477), (0.17647058823529413,0.5421209117938554))

ds.addSample((0.08,0.0,1.0,0.4945321992709599,0.15384615384615385,0.3850574712643678,0.2631578947368421,0.023619663889529206,0.036585365853658534,0.02702702702702703,0.20454545454545456,0.5352697095435685), (0.0784313725490196,0.4519326065411298))

ds.addSample((0.12,0.0,0.0,0.48724179829890646,0.3230769230769231,0.3333333333333333,0.24561403508771928,0.020401770200107573,0.0,0.10810810810810811,0.5909090909090909,0.24481327800829875), (0.21568627450980393,0.45986124876114964))

ds.addSample((0.12,0.0,0.09090909090909091,0.48602673147023084,0.12307692307692308,0.23563218390804597,0.16666666666666666,815281939825.0291,0.0,0.12162162162162163,0.22727272727272727,0.2697095435684647), (0.3137254901960784,0.44202180376610506))

ds.addSample((0.12,0.0,0.18181818181818182,0.4823815309842041,0.13846153846153847,0.3160919540229885,0.20175438596491227,0.002333311379677501,0.024390243902439025,0.0945945945945946,0.38636363636363635,0.3775933609958506), (0.2549019607843137,0.45589692765113976))

ds.addSample((0.12,0.0,0.2727272727272727,0.4775212636695018,0.16923076923076924,0.2471264367816092,0.24561403508771928,0.0015219445088418347,0.024390243902439025,0.13513513513513514,0.22727272727272727,0.3817427385892116), (0.47058823529411764,0.49454905847373637))

ds.addSample((0.12,0.0,0.36363636363636365,0.4690157958687728,0.2923076923076923,0.3620689655172414,0.2982456140350877,758235365144.1801,0.012195121951219513,0.06756756756756757,0.13636363636363635,0.35684647302904565), (0.43137254901960786,0.6293359762140733))

ds.addSample((0.12,0.0,0.45454545454545453,0.4629404617253949,0.15384615384615385,0.3333333333333333,0.2807017543859649,665503122907.542,0.012195121951219513,0.0945945945945946,0.45454545454545453,0.3775933609958506), (0.23529411764705882,0.4985133795837463))

ds.addSample((0.12,0.0,0.5454545454545454,0.4629404617253949,0.2,0.28160919540229884,0.2982456140350877,0.0018379490894721243,0.024390243902439025,0.17567567567567569,0.4090909090909091,0.48132780082987553), (0.21568627450980393,0.5371655104063429))

ds.addSample((0.12,0.0,0.6363636363636364,0.4580801944106926,0.046153846153846156,0.21264367816091953,0.23684210526315788,14295122995.3568,0.036585365853658534,0.06756756756756757,0.38636363636363635,0.21161825726141079), (0.19607843137254902,0.5133795837462835))

ds.addSample((0.12,0.0,0.7272727272727273,0.4580801944106926,0.16923076923076924,0.3103448275862069,0.2631578947368421,0.0011480774085904654,0.0,0.14864864864864866,0.09090909090909091,0.36929460580912865), (0.21568627450980393,0.5629335976214074))

ds.addSample((0.12,0.0,0.8181818181818182,0.4471445929526124,0.2923076923076923,0.4540229885057471,0.2982456140350877,0.0010101755194783812,0.0,0.14864864864864866,0.45454545454545453,0.3360995850622407), (0.2549019607843137,0.599603567888999))

ds.addSample((0.12,0.0,0.9090909090909091,0.4422843256379101,0.2153846153846154,0.3333333333333333,0.18421052631578946,0.0020497799146002786,0.0,0.10810810810810811,0.4090909090909091,0.3153526970954357), (0.3137254901960784,0.5678889990089198))

ds.addSample((0.12,0.0,1.0,0.4349939246658566,0.18461538461538463,0.3793103448275862,0.2894736842105263,0.004278646776654483,0.2804878048780488,0.10810810810810811,0.09090909090909091,0.23236514522821577), (0.3137254901960784,0.5629335976214074))

ds.addSample((0.16,0.0,0.0,0.5808019441069259,0.2153846153846154,0.40229885057471265,0.43859649122807015,0.016690105849551596,0.024390243902439025,0.08108108108108109,0.25,0.27800829875518673), (0.19607843137254902,0.20218037661050545))

ds.addSample((0.16,0.0,0.09090909090909091,0.5795868772782503,0.12307692307692308,0.3103448275862069,0.3333333333333333,0.0018633677643494584,0.012195121951219513,0.0,0.11363636363636363,0.29045643153526973), (0.0784313725490196,0.25173439048562934))

ds.addSample((0.16,0.0,0.18181818181818182,0.574726609963548,0.1076923076923077,0.23563218390804597,0.3157894736842105,0.0018726248888596175,0.14634146341463414,0.14864864864864866,0.2727272727272727,0.35684647302904565), (0.19607843137254902,0.2547076313181368))

ds.addSample((0.16,0.0,0.2727272727272727,0.5710814094775213,0.13846153846153847,0.23563218390804597,0.24561403508771928,0.004349758326472816,0.15853658536585366,0.13513513513513514,0.36363636363636365,0.3775933609958506), (0.13725490196078433,0.20812685827552033))

ds.addSample((0.16,0.0,0.36363636363636365,0.5589307411907655,0.2153846153846154,0.3103448275862069,0.30701754385964913,0.005034946561508655,0.012195121951219513,0.13513513513513514,0.18181818181818182,0.42738589211618255), (0.19607843137254902,0.30921704658077304))

ds.addSample((0.16,0.0,0.45454545454545453,0.5552855407047388,0.12307692307692308,0.25862068965517243,0.2719298245614035,0.05969196825501366,0.23170731707317074,0.20270270270270271,0.25,0.37344398340248963), (0.17647058823529413,0.22695738354806738))

ds.addSample((0.16,0.0,0.5454545454545454,0.5552855407047388,0.13846153846153847,0.19540229885057472,0.2807017543859649,174718169943.249,0.2804878048780488,0.0945945945945946,0.36363636363636365,0.44813278008298757), (0.19607843137254902,0.2844400396432111))

ds.addSample((0.16,0.0,0.6363636363636364,0.5504252733900364,0.03076923076923077,0.3045977011494253,0.23684210526315788,0.007436932635207077,0.1951219512195122,0.17567567567567569,0.0,0.5477178423236515), (0.1568627450980392,0.222001982160555))

ds.addSample((0.16,0.0,0.7272727272727273,0.5504252733900364,0.12307692307692308,0.40804597701149425,0.24561403508771928,0.004398788158198044,0.0,0.3108108108108108,0.2727272727272727,0.42738589211618255), (0.19607843137254902,0.27651139742319125))

ds.addSample((0.16,0.0,0.8181818181818182,0.5419198055893074,0.07692307692307693,0.39080459770114945,0.45614035087719296,0.004932152226649543,0.1951219512195122,0.14864864864864866,0.22727272727272727,0.38589211618257263), (0.1568627450980392,0.24380574826560952))

ds.addSample((0.16,0.0,0.9090909090909091,0.5370595382746051,0.16923076923076924,0.4885057471264368,0.2982456140350877,0.019238548424276355,0.13414634146341464,0.3783783783783784,0.25,0.34854771784232363), (0.21568627450980393,0.288404360753221))

ds.addSample((0.16,0.0,1.0,0.5249088699878494,0.26153846153846155,0.3563218390804598,0.2807017543859649,0.0020965796204212906,0.13414634146341464,0.24324324324324326,0.1590909090909091,0.5352697095435685), (0.29411764705882354,0.22695738354806738))

ds.addSample((0.2,0.0,0.0,0.5504252733900364,0.3076923076923077,0.3620689655172414,0.19298245614035087,0.0024022897663033334,0.0,0.22972972972972974,0.18181818181818182,0.5020746887966805), (0.37254901960784315,0.45391476709613476))

ds.addSample((0.2,0.0,0.09090909090909091,0.5492102065613609,0.2923076923076923,0.3275862068965517,0.15789473684210525,0.003933315770408667,0.08536585365853659,0.2702702702702703,0.5,0.5269709543568465), (0.5490196078431373,0.4489593657086224))

ds.addSample((0.2,0.0,0.18181818181818182,0.5407047387606319,0.38461538461538464,0.3103448275862069,0.21929824561403508,0.0010377493112040483,0.0,0.3918918918918919,0.5454545454545454,0.5850622406639004), (0.5490196078431373,0.4449950445986125))

ds.addSample((0.2,0.0,0.2727272727272727,0.5297691373025516,0.3384615384615385,0.22413793103448276,0.21052631578947367,2110928445351.86,0.0,0.2972972972972973,0.45454545454545453,0.5933609958506224), (0.7450980392156863,0.5450941526263627))

ds.addSample((0.2,0.0,0.36363636363636365,0.5273390036452005,0.4,0.3448275862068966,0.20175438596491227,0.011572990417229229,0.14634146341463414,0.20270270270270271,0.25,0.5435684647302904), (0.7647058823529411,0.6669970267591675))

ds.addSample((0.2,0.0,0.45454545454545453,0.5249088699878494,0.24615384615384617,0.28160919540229884,0.2543859649122807,0.001844271742351895,0.0,0.24324324324324326,0.25,0.4854771784232365), (0.7254901960784313,0.5817641228939544))

ds.addSample((0.2,0.0,0.5454545454545454,0.5249088699878494,0.2153846153846154,0.39080459770114945,0.2631578947368421,0.007084302038396943,0.0,0.12162162162162163,0.5,0.5933609958506224), (0.6274509803921569,0.5619425173439049))

ds.addSample((0.2,0.0,0.6363636363636364,0.5164034021871203,0.18461538461538463,0.2988505747126437,0.19298245614035087,622934984248.251,0.07317073170731707,0.21621621621621623,0.38636363636363635,0.5684647302904564), (0.47058823529411764,0.4658077304261645))

ds.addSample((0.2,0.0,0.7272727272727273,0.5164034021871203,0.27692307692307694,0.27586206896551724,0.11403508771929824,0.015771319744020372,0.0,0.22972972972972974,0.3409090909090909,0.46887966804979253), (0.43137254901960786,0.4836471754212091))

ds.addSample((0.2,0.0,0.8181818181818182,0.5078979343863913,0.36923076923076925,0.47701149425287354,0.2631578947368421,0.02127776863042118,0.04878048780487805,0.32432432432432434,0.5227272727272727,0.45228215767634855), (0.49019607843137253,0.5411298315163529))

ds.addSample((0.2,0.0,0.9090909090909091,0.49696233292831105,0.2,0.3793103448275862,0.20175438596491227,902767258317.691,0.0,0.36486486486486486,0.38636363636363635,0.5435684647302904), (0.5294117647058824,0.5064420218037661))

ds.addSample((0.2,0.0,1.0,0.4896719319562576,0.35384615384615387,0.3103448275862069,0.19298245614035087,0.010098681682967256,0.0,0.14864864864864866,0.2727272727272727,0.23651452282157676), (0.6470588235294118,0.4985133795837463))

ds.addSample((0.24,0.0,0.0,0.3402187120291616,0.1076923076923077,0.39080459770114945,0.30701754385964913,0.002389018781352565,0.4634146341463415,0.3108108108108108,0.20454545454545456,0.35684647302904565), (0.21568627450980393,0.313181367690783))

ds.addSample((0.24,0.0,0.09090909090909091,0.3402187120291616,0.2153846153846154,0.42528735632183906,0.2894736842105263,0.030975082600630068,0.024390243902439025,0.1891891891891892,0.38636363636363635,0.5269709543568465), (0.35294117647058826,0.377601585728444))

ds.addSample((0.24,0.0,0.18181818181818182,0.3353584447144593,0.2153846153846154,0.26436781609195403,0.2631578947368421,0.1123697324947037,0.3048780487804878,0.36486486486486486,0.45454545454545453,0.5269709543568465), (0.27450980392156865,0.512388503468781))



nn = buildNetwork(12, 8, 2, bias=True)

trainer = BackpropTrainer(nn, ds)
print "Treinando..."
for i in xrange(200):
	treinamento = trainer.train()
	#print str((i/200) * 100) + " %"

erro = treinamento*100

print "Erro associado ao treinamento: " + str(erro)

def mutacao(individuo, taxa_mutacao):
  novoIndividuo = []
  decisao = randint(1,10)
  taxa = taxa_mutacao * 10
  # Aqui vai ocorrer a mutacao
  if taxa <= decisao:
    tamanho = len(individuo)
    indiceSorteado = randint(0, tamanho)
    direcao = randint (0, 1)
    for i in range(tamanho):
      if i != indiceSorteado:
        novoIndividuo.append(individuo[i])
      else:
        if direcao == 0:
          novoIndividuo.append(individuo[i] + 0.05)
        else:
          novoIndividuo.append(individuo[i] - 0.05)

    return novoIndividuo
  else:
    return individuo

def fitting(individuo):
  fit = 0
  for i in range(len(individuo)):
    temp = individuo[i] * 0.025 * i
    fit = fit + temp
  return fit


def neural_fitting(individuo):
  fit = nn.activate(individuo)
  #print fit
  return fit

def gera_individuo(dimensao):
  individuo = []
  for i in range(dimensao):
    atributo = uniform(0, 1)
    individuo.append(atributo)
  return individuo

def gera_populacao(tamanho, dimensao):
    populacao = []
    for i in range(tamanho):
        individuo = gera_individuo(dimensao)
        populacao.append(individuo)

    return populacao

fitting_populacao = []
populacao = gera_populacao(12, 12)
melhor_fitness1 = 0
melhor_fitness2 = 0
melhor_individuo = []
contador = 0

while True:

    # Aplica o fitness a todos da populacao
    for i in range(len(populacao)):
        temp = neural_fitting(populacao[i])
        #"imprimindo o temp"
        #print temp
        # Captura o melhor fitness
        if ((temp[0] > melhor_fitness1) and (temp[1] > melhor_fitness2)):
            melhor_fitness1 = temp[0]
            melhor_fitness2 = temp[1]
            melhor_individuo = populacao[i]
        fitting_populacao.append(temp)

    #aplica mutacao na populacao
    for i in range(len(populacao)):
        temp = mutacao(populacao[i], 0.2)
        populacao[i] = temp

    contador = contador + 1
    print "Quantidade de geracoes: " + str(contador)

    if ((melhor_fitness1 >= Gindice1) and (melhor_fitness2 >= Gindice2)):
        
        print "Melhor individuo: " + str(melhor_individuo)
        print "Melhor fitness 1: " + str(melhor_fitness1)
        print "Melhor fitness 2: " + str(melhor_fitness2)
        break
    

#fig, ax = plt.subplots(1, 1)
#ax.hist(np.random.randn(10))
#fig.savefig('display.svg') # Any filename will do


plt.rcdefaults()
fig, ax = plt.subplots()

people = ('#1', '#2', '#3', '#4', '#5', '#6', '#7', '#8', '#9', '#10', '#11', '#12', 'Indicador 1', "Indicador 2")
y_pos = np.arange(len(people))
performance = melhor_individuo
performance.append(melhor_fitness1)
performance.append(melhor_fitness2)

print performance
#error = np.random.rand(len(people))

p1 = ax.barh(y_pos, performance, align='center', color='#60A0D0', ecolor='black')

ax.set_yticks(y_pos)
ax.set_yticklabels(people)
ax.invert_yaxis()  # labels read top-to-bottom
ax.set_xlabel('Valores dos Atributos')
ax.set_title('Otimizador Genetico')

fig.savefig('display2.svg') # Any filename will do
